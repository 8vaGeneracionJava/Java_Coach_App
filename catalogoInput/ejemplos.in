1X1X1XAtributosX1: public class Animal { String name; }
1X2X1XMetodosXpublic String getName() { return name; }\n public void setName(String newName)\n {name = newName;}
1X6X1XComodinesXimport java.util.*;
1X7X1XImportaciones redundantesXimport java.util.*; import java.util.Random;
1X7X2XImportaciones redundantesXimport java.lang.*;
1X8X1XConflicto de nombresXUtilizar la clase Date: import java.util.*; import java.sql.*; //no compila ya que la clase Date se encuentra en ambos paquetes. Solución: import java.util.Date; import java.sql.*;
1X9X1XPaquetesXpackage adaitw
2X1X1XOperadoresXi++ //Operador unario. a==b //operador binario. resultado=(condicion)? valor1: valor2; //Operador ternario.
2X2X1XOperadores aritméticosXint x=2+2;
2X2X2XOperadores aritméticosXSystem.out.print(2*10);
2X12X1XSentencias de declaracionXint  bValue; // double  aValue = 8933.234; // String varCad;
2X13X1XSentencias de ExpresionX valorA = 8933.234; asignación // valorA++; incremento // System.out.println(valorA); llamada a un método // Integer objInt = new Integer(4); creación de objetos.
2X14X1XSentencias de Control de FlujoXPrograma java para ilustrar if // class IfDemo { public static void main(String args[]) { int i = 10; if (i > 15) System.out.println("10 es menor que 15"); // Esta declaración se ejecutará como si considerara una declaración por defecto //System.out.println("No estoy en IF");} }// salida; No estoy en if.
2X14X2XSentencias de Control de FlujoXPrograma Java para ilustrar if-else// class IfElseDemo { public static void main(String args[]) { int i = 20; if (i < 15) System.out.println("Soy menor que 15"); else System.out.println("Soy mayor de 15"); } } //Salida; Soy mayor de 15.
2X14X3XSentencias de Control de FlujoXProgram de Java para ilustrar switch-case //class SwitchCaseDemo {public static void main(String args[]) { int i = 9; switch (i) {case 0: System.out.println("i es cero."); break; case 1: System.out.println("i es uno."); break; case 2: System.out.println("i es dos."); break; default: System.out.println("i es mayor que 2."); }}} // salida; i es mayor que 2.
2X16X1XDeclaración ifXif(hourOfDay < 11) {\n\tSystem.out.println("Good Morning");\n}
2X17X1XDeclaración if-elseXif(hourOfDay < 11) {\n\tSystem.out.println("Good Morning");\n} else {\n\tSystem.out.println("Good Afternoon");\n}
3X2X1XconcatenacionXSystem.out.println (1 + 2); // 3 Ambos operandos son numeros,por lo que usamos la suma normal\nSystem.out.println ("a" + "b"); // ab   es una concatenacion de cadenas simples.\n System.out.println ("a" + "b" + 3); // ab3 primero se ejecutar "a"+"b" y luego la restante 3.\nSystem.out.println (1 + 2 + "c"); // 3c  Ambos operandos son numéricos se suman 3 y se concatena con C\n
3X5X1Xlength() Y charAt ()XEl siguiente código muestra cómo usar charAt ():\nString string = "animales";\nSystem.out.println (string.charAt (0)); // a\n System.out.println (string.charAt (6)); // s\nSystem.out.println (string.charAt (7)); // lanza una excepción \nDado que los índices comienzan a contar con 0, charAt (0) devuelve el "primer" carácter en el secuencia.\n De manera similar, charAt (6) devuelve el "séptimo" carácter de la secuencia.\n charAt (7) es un problema. \n Pide el "octavo" carácter en la secuencia, pero solo hay siete personajes presentes. Cuando algo sale mal y Java no sabe cómo solucionarlo,lanza una excepción, como se muestra aquí.
3X6X1XindexOf()XPodría funcionar de la siguiente manera: String animal = "Elefantes"; \nSystem.out.println(animal.indexOf("e")); //2 \nSystem.out.println(animal.indexOf("an")); //4 \nSystem.out.println(animal.indexOf("fa",6)); //-1
3X7X1Xsubstring()XEl siguiente código muestra cómo usar substring():  String ahorcado = "Anticonstitucionalidad"; \nSystem.out.println(ahorcado.substring(3)); //iconstitucionalidad \nSystem.out.println(ahorcado.substring(4,18)); //constitucional \nSystem.out.println(myStr.substring(myStr.indexOf("tit"))); //titucionalidad
3X10X1Xequals()XSystem.out.println("abc".equals("ABC")); // false
3X10X2Xequals()XSystem.out.println("ABC".equals("ABC")); // true
3X11X1XequalsIgnoreCase()XSystem.out.println("abc".equalsIgnoreCase("ABC")); // true
3X12X1XstartsWith()XSystem.out.println("abc".startsWith("a"));-verdadero //System.out.println("abc".startsWith("A"));-falso //System.out.println("abc".endsWith("c"));- verdadero //System.out.println("abc".endsWith("a"));- falso.
3X13X1Xcontains()XSystem.out.println("abc".contains("b"));-verdadero //System.out.println("abc".contains("B"));-falso.
3X14X1Xreplace()Xchar parameters:System.out.println("abcabc".replace('a', 'A')); // AbcAbc
3X14X2Xreplace()XString parameters:System.out.println("abcabc".replace("a", "A")); // AbcAbc
3X15X1Xtrim()XSystem.out.println("abc".trim()); // abc
3X15X2Xtrim()XSystem.out.println("\t a b c\n".trim()); // a b c
4X5X1XNombre de los métodosX1:public void walk1() { }
4X5X2XNombre de los métodosX2:public void Walk_$() { }
4X6X1XLista de parámetrosX1:public void walk1() { }
4X6X2XLista de parámetrosX2:public void walk2(int a, int b) { }
5X1X1XHerenciaX Loro y águila hereda de Pajaro,\n murcielago y tigre hereda de mamíferos\n mamíferos y pájaros hereda de Animal;
5X1X2XHerenciaXlas clases caniche y siberiano hereda de Perro\nLa clase perro puede heredar de las clases animal y mascota;
5X2X1Xextension de la claseX Public class Lion extends Animal {\n private void roar() {\nSystem.out.println("The "+getAge()+" year old lion says: Roar!");\n}\n};
5X3X1XAplicar modificadores de acceso a las clasesXLa siguiente definición puede aparecer en un solo archivo Java llamado Groundhog.java, ya que contiene una sola clase pública:\nclass Rodent {}\npublic class Groundhog extends Rodent {}\nSi actualizáramos la clase Rodent con el modificador de acceso "público" el archivo Groundhog.java no compilaría, a menos que la clase Rodent fuera reubicada en su propio archivo Rodent.java.
6X1X1XEl rol de las excepcionesXVimos una excepción en el Capítulo 1, "Fundamentos", con un sencillo ejemplo. Escribimos una clase que imprimía el nombre de un zoológico:\n 1: public class Zoo {\n 2: public static void main(String[] args) {\n 3: System.out.println(args[0]);\n 4: System.out.println(args[1]);\n 5: } }\n Luego tratamos de llamarlo sin la cantidad de argumentos suficientes: \n $ javac Zoo.java \n $ java Zoo Zoo \n En la línea 4, Java se dió cuenta de que sólo hay un elemento en el array y el índice 1 no está permitido. Java bajó los brazos derrotado y arrojó una excepción. No intentó resolverlo por sí mismo. Simplemente dijo "no puedo lidiar con esto" y nos mostró la excepción:\n 'ZooException in thread "main" \n java.lang.ArrayIndexOutOfBoundsException: 1 \n at mainmethod.Zoo.main(Zoo.java:7)'
6X2X1XEntendiendo los tipos de excepcionesXEste metodo declara que podria lanzar una excepcion: \n void fall () throws Exception \n {throw new Exception (); \n } \n Observe que esta usando dos palabras clave diferentes aqui. throw le dice a Java que desea lanzar una excepcion. throws simplemente declara que el metodo podría lanzar una Excepcion. Tambien puede que no. Vera la palabra clave throws mas adelante en el capitulo. \n Debido a que las excepciones marcadas tienden a anticiparse, Java obliga al programador a hacer algo para mostrar que se penso en la excepcion. Quizas se manejo en el metodo. \n O tal vez el metodo declara que no puede manejar la excepcion y alguien mas deberia hacerlo. \n Un ejemplo de una excepcion en tiempo de ejecucion es una NullPointerException, que ocurre cuando intenta llamar a un miembro en una referencia nula. Esto puede ocurrir con cualquier metodo. Si tuviera que declarar excepciones de tiempo de ejecucion en todas partes, ¡cada metodo tendria ese desorden!